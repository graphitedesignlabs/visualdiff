#!/bin/bash

# Check if both PDFs are provided as arguments
if [ "$#" -lt 3 ]; then
    echo "Usage: $0 <input_pdf1> <input_pdf2> <output_pdf> [--debug]"
    exit 1
fi

# Assign input arguments to variables
pdf1=$1
pdf2=$2
output_pdf=$3

# Check if the debug flag is set
debug=false
if [ "$4" == "--debug" ]; then
    debug=true
    echo "Debug mode enabled. Limiting to 30 images."
fi

# Create cache directory if it doesn't exist
mkdir -p cache

# Check if the first greyscale page for PDF1 already exists in the cache
if [ ! -f "cache/pdf1_page_000.png" ]; then
    # Convert PDF1 to greyscale images (one per page) and save to cache
    echo "Converting $pdf1 to greyscale images in cache..."
    convert -density 300 "$pdf1" -colorspace Gray "cache/pdf1_page_%03d.png"

    # Convert pages to RGB after greyscale conversion
    echo "Converting $pdf1 images in cache to RGB..."
    for img in cache/pdf1_page_*.png; do
        convert "$img" -colorspace RGB "$img"
    done
else
    echo "Greyscale and RGB images for $pdf1 already exist in cache, skipping conversion."
fi

# Check if the first greyscale page for PDF2 already exists in the cache
if [ ! -f "cache/pdf2_page_000.png" ]; then
    # Convert PDF2 to greyscale images (one per page) and save to cache
    echo "Converting $pdf2 to greyscale images in cache..."
    convert -density 300 "$pdf2" -colorspace Gray "cache/pdf2_page_%03d.png"

    # Convert pages to RGB after greyscale conversion
    echo "Converting $pdf2 images in cache to RGB..."
    for img in cache/pdf2_page_*.png; do
        convert "$img" -colorspace RGB "$img"
    done
else
    echo "Greyscale and RGB images for $pdf2 already exist in cache, skipping conversion."
fi

# Create a temp directory to store intermediate diff images
mkdir -p diff_images

# Create lookup tables (LUT) for red and blue gradients: black to red and black to blue
convert -size 1x256 gradient:white-red "red_gradient.png"
convert -size 1x256 gradient:white-blue "blue_gradient.png"

# Get total page count
page_count=$(ls cache/pdf1_page_*.png | wc -l)

# If in debug mode, limit the number of pages to 30
if [ "$debug" == true ]; then
    page_count=$(($page_count < 30 ? $page_count : 30))
fi

# Loop through all the generated pages and apply color lookup and blending
for ((i=0; i<$page_count; i++))
do
    printf "Processing page %d of %d...\n" $((i+1)) $page_count
    page1=$(printf "cache/pdf1_page_%03d.png" $i)
    page2=$(printf "cache/pdf2_page_%03d.png" $i)
    
    # Apply the red gradient to the first page using -clut
    echo "Applying red gradient to page $i..."
    convert "$page1" -negate red_gradient.png -clut "diff_images/red_page_$i.png"
    
    # Apply the blue gradient to the second page using -clut
    echo "Applying blue gradient to page $i..."
    convert "$page2" -negate blue_gradient.png -clut "diff_images/blue_page_$i.png"
    
    # Blend the two images using Blend with 50% opacity each
    echo "Blending red and blue images at 50% for page $i..."
    convert "diff_images/red_page_$i.png" "diff_images/blue_page_$i.png" -compose Blend -define compose:args=50,50 -composite "diff_images/diff_page_$i.png"
done

# Combine all the diff images into a single output PDF
echo "Combining diff images into $output_pdf..."
convert diff_images/diff_page_*.png "$output_pdf"

# Clean up intermediate images
echo "Cleaning up..."
rm diff_images/red_page_*.png diff_images/blue_page_*.png
rm -rf diff_images
rm red_gradient.png blue_gradient.png

echo "Done! The output is saved as $output_pdf."

